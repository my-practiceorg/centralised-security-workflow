name: Monthly Audit New Repos For Secret Scan Config

on:
  workflow_dispatch: # Allows the workflow to be manually triggered
  schedule:
    - cron: '0 0 1 * *' # Runs on the 1st of every month at midnight

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run GitHub Repos Script
        id: run_script
        run: |
          python fetch_metadata.py -pat ${{ secrets.MY_PAT }} -org my-practiceorg || (echo "An error occurred while running the script." > error.log && exit 1)

      - name: List Files in Workspace (After Script Execution)
        run: |
          echo "Listing all files in the current directory after running the script:"
          ls -alh

      - name: Print File Path for Debugging
        run: |
          echo "Attempting to check the existence of repos_last_30_days.csv in the following path:"
          realpath repos_last_30_days.csv

      - name: Verify CSV Generation (Using Absolute Path)
        run: |
          CSV_PATH=$(realpath repos_last_30_days.csv)
          echo "Checking if the CSV file exists at: $CSV_PATH"
          if [ -f "$CSV_PATH" ]; then
            echo "CSV file exists: $CSV_PATH"
          else
            echo "CSV file does not exist at: $CSV_PATH"
            exit 1
          fi
        shell: bash

      - name: Upload CSV as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: repos_last_30_days
          path: repos_last_30_days.csv

      - name: Create Placeholder Error Log
        if: failure()
        run: |
          echo "No error log found, creating a placeholder."
          echo "No error log found, but the script did not generate a CSV file." > error.log

      - name: Upload error log as Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error_log
          path: error.log

      - name: Apply Branch Protection to non compliant repos
        id: apply_BP_script
        run: |
          python applybranchprotection.py -pat ${{ secrets.MY_PAT }} -org my-practiceorg || (echo "An error occurred while running the script." > error.log && exit 1)

      - name: Upload CSV as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: branch_protection_results
          path: branch_protection_results.csv
          
      - name: Notify Slack with Branch Protection Summary
        if: success()
        run: |
          echo "Preparing Slack summary..."

          # GitHub context vars
          GITHUB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          ARTIFACTS_LINK="$GITHUB_URL#artifacts"

          if [ ! -f branch_protection_results.csv ]; then
            echo "branch_protection_results.csv not found. Skipping Slack summary."
            exit 0
          fi

          head -n 11 branch_protection_results.csv > summary.csv
          TABLE=$(column -s, -t summary.csv)
          TABLE_ESCAPED=$(printf "%s\n" "$TABLE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          JSON_PAYLOAD=$(cat <<EOF
{
  "text": "‚úÖ *Branch protection applied to the following repositories:*\n\`\`\`\n$TABLE_ESCAPED\n\`\`\`\nüìÑ *Download full CSV and logs:* <$ARTIFACTS_LINK>\n\n‚úÖ *The CSV file with the GitHub repositories created in the last 30 days has also been uploaded.*"
}
EOF
)

          curl -X POST -H 'Content-type: application/json' --data "$JSON_PAYLOAD" ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack with Error Log Link
        if: failure()
        run: |
          GITHUB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"‚ùå *An error occurred during the GitHub Repos audit.*\nüìÑ *Download the error log:* <$GITHUB_URL#artifacts>\"
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
      
